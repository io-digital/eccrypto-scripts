#!/usr/bin/env node

'use strict'

var fs = require('fs')

var eccrypto = require('eccrypto')

var command = process.argv[0]
var script = process.argv[1]
var private_key = process.argv[2]
var iv = process.argv[3]
var ephem = process.argv[4]
var mac = process.argv[5]
var cipher = process.argv[6]

if (cipher && fs.statSync(cipher).isFile()) cipher = fs.readFileSync(cipher)

if (!(private_key && iv && ephem && mac)) {
  return process.stdout.write(JSON.stringify({
    error: 'private key, iv, ephem or mac not given'
  }), function() {
    process.exit(1)
  })
}

var pk, m

stdin.buffer().then(function(s) {

  if (!s.length && typeof cipher === 'undefined') {
    return process.stdout.write(JSON.stringify({
      error: 'ciphertext not given'
    }), function() {
      process.exit(1)
    })
  }

  try {
    pk = Buffer(private_key, 'hex')
    m = {
      iv: Buffer(iv, 'hex'),
      ephemPublicKey: Buffer(ephem, 'hex'),
      ciphertext: s || Buffer(cipher, 'hex'),
      mac: Buffer(mac, 'hex')
    }
  } catch (err) {
    return process.stdout.write(JSON.stringify({
      error: 'private key, iv, ephem, cipher or mac is not hexadecimal'
    }), function() {
      process.exit(1)
    })
  }

  return eccrypto.decrypt(pk, m)

}).then(function(decrypted) {
  process.stdout.write(JSON.stringify({
    decrypted: decrypted.toString()
  }), function() {
    process.exit(0)
  })
}).catch(function(err) {
  process.stdout.write(JSON.stringify({
    eccrypto_error: JSON.stringify(err)
  }), function() {
    process.exit(1)
  })
})
