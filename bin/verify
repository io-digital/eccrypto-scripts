#!/usr/bin/env node

'use strict'

var crypto = require('crypto')
var stdin = require('get-stdin')
var eccrypto = require('eccrypto')

var command = process.argv[0]
var script = process.argv[1]
var public_key = process.argv[2]
var signature = process.argv[3]
var message = process.argv[4]

var pk, m, s

stdin.buffer().then(function(s) {

  if (!s.length && typeof message === 'undefined') {
    return process.stdout.write(JSON.stringify({
      error: 'message not given'
    }), function() {
      process.exit(1)
    })
  }

  m = crypto.createHash('sha256').update(
    s.toString().trim() ||
    message
  ).digest()

  if (!(public_key && signature)) {
    return process.stdout.write(JSON.stringify({
      error: 'public key or signature not given'
    }), function() {
      process.exit(1)
    })
  }

  try {
    pk = Buffer(public_key, 'hex')
    s = Buffer(signature, 'hex')
  } catch (err) {
    return process.stdout.write(JSON.stringify({
      error: 'public key or signature is not a hexadecimal string'
    }), function() {
      process.exit(1)
    })
  }

  return eccrypto.verify(pk, m, s)

}).then(function() {
  process.stdout.write(JSON.stringify({verified: true}), function() {
    process.exit(0)
  })
}).catch(function(err) {
  process.stdout.write(JSON.stringify({
    verified: false, eccrypto_error: JSON.stringify(err)
  }), function() {
    process.exit(1)
  })
})
